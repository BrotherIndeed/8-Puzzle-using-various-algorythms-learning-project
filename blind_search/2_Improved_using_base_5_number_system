#include <stdio.h>
#include <iostream>
#include <cmath>

using namespace std;

int puzzle(int result[3][3] , int original[3][3]);

int print_matrix(int ary1[3][3]);
int solve(int x, int original[3][3]);
int shift(int ary[3][3]);
int convert(int N);

int up(int ary[3][3]);
int down(int ary[3][3]);
int left(int ary[3][3]);
int right(int ary[3][3]);


int main()
{
    int result[3][3] ={   {2, 8, 3}
                        , {1, 6, 4}
                        , {5, 7, 0} 
                        };
                    
    int original[3][3] ={ {1, 2, 3}
                        , {5, 6, 0}
                        , {7, 8, 4} 
                        };
                        
                        
    puzzle(result , original);
    return 0;
}

int puzzle(int result[3][3] , int original[3][3])
{
    int n=0,x=1,m=0,i,j;
    int ary[3][3];
copy(&original[0][0], &original[0][0]+3*3,&ary[0][0]);

                    printf("Initial state\n");
        for(i=0; i<3; ++i) 
                                    {
                                        for(j=0; j<3; ++j)
                                        {
                                            printf("%d ",ary[i][j]);
                                        }
                                        printf("\n");
                                    }
                            printf("\n");
                            printf("Final State\n");
        for(i=0; i<3; ++i) 
                                    {
                                        for(j=0; j<3; ++j)
                                        {
                                            printf("%d ",result[i][j]);
                                        }
                                        printf("\n");
                                    }
       printf("\n\nSearching \n");
       
       
            while(x<10000000)
            {
            x=x+1;
            m=convert(x);
                {
                    while(m>0 )
                        {
                            n=m%10;
                            m=m/10;
                            
                                if(n==1)
                                    {up(ary);}
                                if(n==2)
                                    {down(ary);}
                                if(n==3)
                                    {left(ary);}
                                if(n==4)
                                    {right(ary);}
                                    
                                    if(result[0][0] == ary [0][0] && result[0][1] == ary [0][1] && result[0][2] == ary [0][2] && 
                                       result[1][0] == ary [1][0] && result[1][1] == ary [1][1] && result[1][2] == ary [1][2] && 
                                       result[2][0] == ary [2][0] && result[2][1] == ary [2][1] && result[2][2] == ary [2][2] ) 
                                       {
                                           printf("Success! solution was found:\n\n");
                                           solve(x, original);
                                           return 0;
                                       }
                                
                        }
                    
                }
                    copy(&original[0][0], &original[0][0]+3*3,&ary[0][0]);
            }
}



int up(int ary[3][3])
{
    int i, j;
    for(i=0; i<3; ++i) 
    {
        for(j=0; j<3; ++j)
        {
            if(ary[i][j] == 0 && i > 0 )
            {
                ary[i][j] = ary[i-1][j];
                ary[i-1][j] = 0;
            }
        }
    }
}


int down(int ary[3][3])
{
    int i, j, v = 0;
    for(i=0; i<3; ++i) 
    {
        for(j=0; j<3; ++j)
        {
            if(ary[i][j] == 0 && i < 2 && v==0)
            {
                ary[i][j] = ary[i+1][j];
                ary[i+1][j] = 0;
                v=1;
            }
        }
    }
}


int left(int ary[3][3])
{
    int i, j;
    for(i=0; i<3; ++i) 
    {
        for(j=0; j<3; ++j)
        {
            if(ary[i][j] == 0 && j > 0)
            {
                ary[i][j] = ary[i][j-1];
                ary[i][j-1] = 0;
            }
        }
    }
}


int right(int ary[3][3])
{
    int i, j, v=0;
    for(i=0; i<3; ++i) 
    {
        for(j=0; j<3; ++j)
        {
            if(ary[i][j] == 0 && j < 2 && v ==0)
            {
                ary[i][j] = ary[i][j+1];
                ary[i][j+1] = 0;
                v = 1;
            }
        }
    }



}

int solve(int x, int original[3][3])
{
    int m,n,i,j, ary[3][3];
    m=convert(x);
    copy(&original[0][0], &original[0][0]+3*3,&ary[0][0]);
                    while(m>0)
                        {
                            n=m%10;
                            m=m/10;
                                if(n==1)
                                    {up(ary);
                                    printf("up  \n");}
                                if(n==2)
                                    {down(ary);
                                    printf("down \n");}
                                if(n==3)
                                    {left(ary);
                                    printf("left  \n");}
                                if(n==4)
                                    {right(ary);
                                    printf("right  \n");}
                            for(i=0; i<3; ++i) 
                                    {
                                        for(j=0; j<3; ++j)
                                        {
                                            printf("%d ",ary[i][j]);
                                        }
                                        printf("\n");
                                    }
                            printf("\n");
                            printf("\n");
                        }
    return 0;
}

int convert(int N)
{
  
    int num = 0;
    int i = 0;
    while (N != 0) 
    {
        int rem = N % 5;
        int c = pow(10, i);
        num += rem * c;
        N /= 5;
  
        i++;
    }
  
    return num;
}
