#include <stdio.h>
#include <iostream>
#include <cmath>

using namespace std;

int puzzle(int result[3][3] , int original[3][3]);

int print_matrix(int ary1[3][3]);
int solve(long long int x, int original[3][3]);
int print_matrix(int ary[3][3]);
long long int convert(int N);

//these 4 functions switch the zero with the value towards the direction specified. 
int up(int ary[3][3]);
int down(int ary[3][3]);
int left(int ary[3][3]);
int right(int ary[3][3]);

//this is only calling the puzzle function while printing out matrixes and also taking input from user.
int main()
{
    int method;
    int result[3][3] =  { {2, 8, 3}
                        , {1, 6, 4}
                        , {0, 5, 7} 
                        };
                     
    int original[3][3] ={ {1, 2, 3}
                        , {5, 6, 0}
                        , {7, 8, 4} 
                        };
    printf("\n\nInitial state\n");
        print_matrix(original);
        printf("\n");
        
        printf("Final State\n");
        print_matrix(result);
        printf("\n");
                        
printf("Method of solving:\n1. Forward\n2. Backwards\n\n\nEnter Option: ");
scanf("%d", &method);
    if(method == 1)
        {
            puzzle(original , result);
        }
    if(method == 2)
        {
            puzzle(result , original);
        }
    return 0;
}



int puzzle(int original[3][3], int result[3][3])
{
    int n=0,x=0,i,j;
    long long int m=0;
    int ary[3][3];
copy(&original[0][0], &original[0][0]+3*3,&ary[0][0]);

        printf("\n\nInitial state\n");
        print_matrix(ary); // printing out initial matrix
        printf("\n");
        
        printf("Final State\n");
        print_matrix(result);// printing out final matrix
        printf("\n");
        
        printf("\n\nSearching \n\n");
        printf("Current search number: \n");
       
       //this loop will run 10 million times, with the value of x increasing from 1 to 10,000,000
            while(x<2147483646)
            {
            x=x+1;
            m=convert(x);// m value is equal to x with base 5, so only 0 to 4 digits are included.(1,2,3,4,10,11,12,13,14,20,21.......)
            printf("\r%lld",m);
            
                {
                    while(m>0 )
                        {
                            n=m%10;
                            
                            m=m/10;
                            
                                if(n==0)
                                    {up(ary);}
                                if(n==1)
                                    {down(ary);}
                                if(n==2)
                                    {left(ary);}
                                if(n==3)
                                    {right(ary);}
                                    
                                    // This is checkin if the initial is same as the final needed state.
                                    if(result[0][0] == ary [0][0] && result[0][1] == ary [0][1] && result[0][2] == ary [0][2] && 
                                       result[1][0] == ary [1][0] && result[1][1] == ary [1][1] && result[1][2] == ary [1][2] && 
                                       result[2][0] == ary [2][0] && result[2][1] == ary [2][1] && result[2][2] == ary [2][2] ) 
                                       {
                                           printf("\nSuccess!! solution was found:\n\n");
                                           solve(convert(x), original);// This only prints the path to final state. 
                                           return 0;
                                       }
                                
                        }
                    
                }
                if(m<0)
                    {printf("\nlimit reached \nm = %d \n x = %d\n %d\n",m,x,convert(x-1) );
                    return 0;}
                copy(&original[0][0], &original[0][0]+3*3,&ary[0][0]);
            }
}



int up(int ary[3][3])
{
    int i, j;
    for(i=0; i<3; ++i) 
    {
        for(j=0; j<3; ++j)
        {
            if(ary[i][j] == 0 && i > 0 )
            {
                ary[i][j] = ary[i-1][j];
                ary[i-1][j] = 0;
                return 0;
            }
        }
    }
}


int down(int ary[3][3])
{
    int i, j;
    for(i=0; i<3; ++i) 
    {
        for(j=0; j<3; ++j)
        {
            if(ary[i][j] == 0 && i < 2)
            {
                ary[i][j] = ary[i+1][j];
                ary[i+1][j] = 0;
                return 0;
            }
        }
    }
}


int left(int ary[3][3])
{
    int i, j;
    for(i=0; i<3; ++i) 
    {
        for(j=0; j<3; ++j)
        {
            if(ary[i][j] == 0 && j > 0)
            {
                ary[i][j] = ary[i][j-1];
                ary[i][j-1] = 0;
                return 0;
            }
        }
    }
}


int right(int ary[3][3])
{
    int i, j;
    for(i=0; i<3; ++i) 
    {
        for(j=0; j<3; ++j)
        {
            if(ary[i][j] == 0 && j < 2)
            {
                ary[i][j] = ary[i][j+1];
                ary[i][j+1] = 0;
                return 0;
            }
        }
    }



}

int solve(long long int m, int original[3][3])
{
    int n,i,j, ary[3][3];
    copy(&original[0][0], &original[0][0]+3*3,&ary[0][0]);
                    while(m>0)
                        {
                            n=m%10;
                            m=m/10;
                            
                            print_matrix(ary);
                            
                            printf("\n");
                                if(n==0)
                                    {up(ary);
                                    printf("up  \n");}
                                if(n==1)
                                    {down(ary);
                                    printf("down \n");}
                                if(n==2)
                                    {left(ary);
                                    printf("left  \n");}
                                if(n==3)
                                    {right(ary);
                                    printf("right  \n");}
                                    
    
                            
                            printf("\n");
                        }
                print_matrix(ary);
    return 0;
}

long long int convert(int N)
{
    
  
    long long int num = 0;
    int i = 0;
    while (N != 0) 
    {
        int rem = N % 4;
        long long int c = pow(10, i);
        num += rem * c;
        N /= 4;
        i++;
    }
    return num;
}


int print_matrix(int ary[3][3])
{
    int i,j;
    for(i=0; i<3; ++i) 
        {
            for(j=0; j<3; ++j)
                {
                    printf("%d ",ary[i][j]);
                }
            printf("\n");
        }
}
